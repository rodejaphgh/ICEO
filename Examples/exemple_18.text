iceo definition: #personne.iceo definition: #femme genus: personne.iceo definition: #homme genus: personne.iceo definitionSituation: #famille.iceo definitionQualite: #épouse situation: famille.iceo definitionQualite: #époux situation: famille.(famille get: #épouse) associationQualite: (famille get: #époux).iceo definitionQualite: #parent situation: famille.iceo definitionQualite: #enfant situation: famille.iceo definitionQualite: #soeur situation: famille.iceo definitionQualite: #frère situation: famille.iceo definitionQualite: #fils situation: famille genus: (famille get: #enfant).iceo definitionQualite: #père situation: famille genus: (famille get: #parent).iceo definitionQualite: #fille situation: famille genus: (famille get: #enfant).iceo definitionQualite: #mère situation: famille genus: (famille get: #parent).		(famille get: #parent) associationQualite: (famille get: #enfant).(famille get: #père) associationQualite: (famille get: #fils).(famille get: #père) associationQualite: (famille get: #fille).(famille get: #mère) associationQualite: (famille get: #fils).(famille get: #mère) associationQualite: (famille get: #fille).(famille get: #frère) associationQualite: (famille get: #soeur).(famille get: #frère) associationQualite: (famille get: #frère).(famille get: #soeur) associationQualite: (famille get: #soeur).femme peutEtre: (famille get: #épouse).homme peutEtre: (famille get: #époux).	homme peutEtre: (famille get: #père).homme peutEtre: (famille get: #fils).femme peutEtre: (famille get: #mère).femme peutEtre: (famille get: #fille).	(famille get: #fille) peutEtre: (famille get: #soeur).(famille get: #fils) peutEtre: (famille get: #frère).	"  ----------------------------  "iceo soit: #Gonthier situationGenerique: famille.iceo soit: #Hermeline essence: femme.iceo soit: #Charles essence: homme.(monde get: #Hermeline) affecteEtat: (famille get: #épouse) dansSituation: (monde getSituation: #Gonthier).(monde get: #Charles) affecteEtat: (famille get: #époux) dansSituation: (monde getSituation: #Gonthier).((monde get: #Charles) getEtat: #époux) associationEtat: ((monde get: #Hermeline) getEtat: #épouse dansSituation: (monde getSituation: #Gonthier))." ------------------ "femme compile: ' metAuMonde: prénom famille: uneFamille essence: uneEssence	| époux |	iceo soit: prénom essence: uneEssence. 	(self getEtat: #épouse) notNil ifTrue: [époux := ((self getEtresAttributsQuiSont: (famille get: #époux))) at: 1]. 	(self getEtat: #mère) ifNil: [self affecteEtat: (famille get: #mère) dansSituation: uneFamille].	(époux getEtat: #père) ifNil: [époux affecteEtat: (famille get: #père) dansSituation: uneFamille].	uneEssence getNom == #homme		ifTrue: [ (monde get: prénom) affecteEtat: (famille get: #fils) dansSituation: uneFamille.			(self getEtat: #mère) associationEtat: ((monde get: prénom) getEtat: #fils dansSituation: uneFamille).			(époux getEtat: #père) associationEtat: ((monde get: prénom) getEtat: #fils dansSituation: uneFamille).						"Si la femme a déjà des enfants, le dernier né est leur frère"			"l''étant de ce frère est l''état fils du nouveau né"			"l''état frère de l''état fils du nouveau né sera ici le même pour tous les autres enfants"			((self getEtresAttributsQuiSont: (famille get: #enfant)) size > 0) ifTrue: [				((monde get: prénom) getEtat: #frère) ifNil: [	((monde get: prénom) getEtat: #fils) affecteEtat: (famille get: #frère) dansSituation: uneFamille]].			((self getEtresAttributsQuiSont: (famille get: #enfant)) copyWithout: (monde get: prénom)) do: [:each |								(each getEtat: #fille) ifNotNil: [ 					((each getEtat: #fille) getEtat: #soeur) ifNil: [(each getEtat: #fille) affecteEtat: (famille get: #soeur) dansSituation: uneFamille].					((each getEtat: #fille) getEtat: #soeur) associationEtat: (((monde get: prénom) getEtat: #fils) getEtat: #frère)].								(each getEtat: #fils) ifNotNil: [ 					((each getEtat: #fils) getEtat: #frère) ifNil: [(each getEtat: #fils) affecteEtat: (famille get: #frère) dansSituation: uneFamille].				((each getEtat: #fils) getEtat: #frère) associationEtat: (((monde get: prénom) getEtat: #fils) getEtat: #frère)]]]								ifFalse: [ (monde get: prénom) affecteEtat: (famille get: #fille) dansSituation: uneFamille.			(self getEtat: #mère) associationEtat: ((monde get: prénom) getEtat: #fille dansSituation: uneFamille).			(époux getEtat: #père) associationEtat: ((monde get: prénom) getEtat: #fille dansSituation: uneFamille).						"Si la femme a déjà des enfants, le dernier né est leur soeur"			"l''étant de cette soeur est l''état fille du nouveau né"			"l''état soeur de l''état fille du nouveau né sera ici le même pour tous les autres enfants"						((self getEtresAttributsQuiSont: (famille get: #enfant)) size > 0) ifTrue: [					((monde get: prénom) getEtat: #soeur) ifNil: [	((monde get: prénom) getEtat: #fille) affecteEtat: (famille get: #soeur) dansSituation: uneFamille]].							((self getEtresAttributsQuiSont: (famille get: #enfant)) copyWithout: (monde get: prénom)) do: [:each |				(each getEtat: #fille) ifNotNil: [ 					((each getEtat: #fille) getEtat: #soeur) ifNil: [(each getEtat: #fille) affecteEtat: (famille get: #soeur) dansSituation: uneFamille].					((each getEtat: #fille) getEtat: #soeur) associationEtat: (((monde get: prénom) getEtat: #fille) getEtat: #soeur)].				(each getEtat: #fils) ifNotNil: [ 						((each getEtat: #fils) getEtat: #frère) ifNil: [(each getEtat: #fils) affecteEtat: (famille get: #frère) dansSituation: uneFamille].					((each getEtat: #fils) getEtat: #frère) associationEtat: (((monde get: prénom) getEtat: #fille) getEtat: #soeur)]]]	'.								" ------------------------------------------------------ "						(monde get: #Hermeline) metAuMonde: #Capucine famille: (monde get: #Gonthier) essence: femme.(monde get: #Hermeline) metAuMonde: #Jean famille: (monde get: #Gonthier) essence: homme.(monde get: #Hermeline) metAuMonde: #Martin famille: (monde get: #Gonthier) essence: homme.(monde get: #Hermeline) metAuMonde: #Juliette famille: (monde get: #Gonthier) essence: femme." ------------------------------------------------------ "" pour imprimer le nom de famille des membres de la famille Gonthier ..."chose compile: ' printOn: aStream 		self isEtat			ifTrue: [self getEtats					detect: [:e | e getSituationDefinition class getNom == #famille]					ifFound: [:x | aStream nextPutAll: self getEtant getNom , '' '' , x getSituationDefinition getNom]					ifNone: [aStream nextPutAll: self getNom]]			ifFalse: [				self getEtats					detect: [:e | e getSituationDefinition class getNom == #famille]					ifFound: [:x | aStream nextPutAll: self getNom , '' '' , x getSituationDefinition getNom]					ifNone: [aStream nextPutAll: self getNom]]' " ------------------------------- "			" Tests((monde get: #Charles) getEtresAttributsQuiSont: (famille get: #enfant))  ((monde get: #Charles) getEtresAttributsQuiSont: (famille get: #fille))    	((monde get: #Capucine) getEtresAttributsQuiSont: (famille get: #frère)) ((monde get: #Capucine) getEtresAttributsQuiSont: (famille get: #soeur))  ((monde get: #Martin) getEtresAttributsQuiSont: (famille get: #soeur)) ((monde get: #Martin) getEtresAttributsQuiSont: (famille get: #frère))    "				.	.