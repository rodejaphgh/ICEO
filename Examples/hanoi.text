" WorldMorph currentWorld "PolygonMorph subclass: #ICEOMorph	instanceVariableNames: ''	classVariableNames: ''	package: 'Morphic-Base-Basic'.	ICEOMorph compile: 'handlesMouseDown: anEvent       ^ true'.ICEOMorph compile: 'mouseDown: anEvent    anEvent redButtonPressed        ifTrue: [((Smalltalk at: #Step) == 0) ifTrue: [(monde get: #Hanoi)  go]].      anEvent yellowButtonPressed     ifTrue: [(monde get: #Hanoi) fin. ICEO reset. ''See you  !'' crTrace].self changed'.Essence compile: ' printOn: aStream 	aStream nextPutAll: self getNom' .iceo definition: #jeu.iceo definitionSituation: #piquet.jeu referenceEssence: piquet cardinalite: 3.          iceo definitionAttribut: #disque de: jeu cardinalite: 9.Smalltalk at: #delay put: 10.  "ms"jeu compile: 'nbDisques 	^self getEtres size'.iceo definitionQualite: #sous situation: absolu.(absolu get: #sous) referenceEssence: (jeu getEssenceAttribut: #disque).(jeu getEssenceAttribut: #disque) peutEtre: (absolu get: #sous).iceo definitionQualite: #sur situation: absolu.(absolu get: #sur) referenceEssence: (jeu getEssenceAttribut: #disque).(jeu getEssenceAttribut: #disque) peutEtre: (absolu get: #sur).iceo definitionQualite: #déplacé situation: absolu.(absolu get: #déplacé) referenceEssence: (jeu getEssenceAttribut: #piquet).(jeu getEssenceAttribut: #disque) peutEtre: (absolu get: #déplacé).iceo definitionQualite: #dernier situation: absolu.(jeu getEssenceAttribut: #disque) peutEtre: (absolu get: #dernier).jeu compile: 'allezAuxStartingBlocks	self getEtres do: [:each |  (each getEtat: #comportement) getProcess resume].	self construirePiste.	(Smalltalk at: #Piste)  openInWorld '.		" le disque le plus petit commence "jeu compile: 'go	((((self getEtresAttributs: #disque)  sorted: [:a :b |   a getTaille <  b getTaille]) at: 1)  getEtat: #comportement)  getSemaphore  signal'.	jeu compile: 'fin	self getEtres do: [:each |  (each getEtat: #comportement) getProcess terminate].	(Smalltalk at: #Piste) delete'.iceo definitionQualiteEssentielle: #comportement pour: (jeu getEssenceAttribut: #disque) effectivite: #permanente.( (jeu getEssenceAttribut: #disque) getQualite: #comportement) addInstVarNamed: #sem.( (jeu getEssenceAttribut: #disque) getQualite: #comportement) compile: 'setSemaphore: unSemaphore sem := unSemaphore'. ( (jeu getEssenceAttribut: #disque) getQualite: #comportement) compile: 'getSemaphore ^sem'. ( (jeu getEssenceAttribut: #disque) getQualite: #comportement) addInstVarNamed: #process.( (jeu getEssenceAttribut: #disque) getQualite: #comportement) compile: 'setProcess: unProcess process := unProcess'. ( (jeu getEssenceAttribut: #disque) getQualite: #comportement) compile: 'getProcess ^process'." pour l'animation "(jeu getEssenceAttribut: #disque) addInstVarNamed: #morph.(jeu getEssenceAttribut: #disque)  compile: 'setMorph: uneMorph morph := uneMorph'. (jeu getEssenceAttribut: #disque)  compile: 'getMorph ^ morph'. (jeu getEssenceAttribut: #disque) compile: 'getTaille	^(((monde get: #Hanoi) getEtresAttributs: #disque) size - (self getNom  withoutPrefix: #disque_) asInteger) * 2'.	(jeu getEssenceAttribut: #disque) compile: 'getPiquet	^((monde get: #Hanoi) getEtresAttributs: #piquet) detect: [:each |  each getElements includes: self]'.	 (jeu getEssenceAttribut: #disque) compile: 'peutSeDeplacer	| disques |	((self getEtat: #sous) notNil or: [(self getEtat: #dernier) notNil]) ifTrue: [^false].  	((monde get: #Hanoi) getEtresAttributs: #piquet) do: 		[:p | disques :=  p getElements select: [:each |    each getEssence getNom == #disque]. 			(disques size == 0 or: [disques last getTaille >  self getTaille])  ifTrue: [^true]].	^false '.	jeu  compile: 'construirePiste| piste m p1 p2 p3 p4 x g w e h font z g1 g2 g3 mp1 mp2 mp3 |w := 10.z := ((monde get: #Hanoi) getEtresAttributs: #disque) first getTaille * w.g := 100 + (z * 3).g1 := 100 + (z / 2).g2 := 100 + (3 * z / 2).g3 := 100 + (5 * z / 2).piste := (ICEOMorph		vertices: {100@800. g@800. g@801. 100@801}		color: (Color white alpha: 0.0)		borderWidth: 1		borderColor: Color black).mp1  := (ICEOMorph		vertices: {g1@800. g1@800. g1@500. g1@500}		color: (Color white alpha: 1)		borderWidth: 1		borderColor: Color black).piste addMorph: mp1.mp2  := (ICEOMorph		vertices: {g2@800. g2@800. g2@500. g2@500}		color: (Color white alpha: 1)		borderWidth: 1		borderColor: Color black).piste addMorph: mp2.mp3  := (ICEOMorph		vertices: {g3@800. g3@800. g3@500. g3@500}		color: (Color white alpha: 1)		borderWidth: 1		borderColor: Color black).piste addMorph: mp3.font := LogicalFont familyName: StandardFonts defaultFont familyName pointSize: 25.Smalltalk at: #StepMorph put: (((StringMorph contents: ''0'' font: font emphasis: TextEmphasis bold) position: (100@300)) color: Color black).piste addMorph: (Smalltalk at: #StepMorph).h := 16.e :=5.x := 0.	((monde get: #Hanoi) getEtresAttributs: #disque) do: [:d |   		p1 := (100 + (w * x)) @  (800 - (h + e * x + e)) .       	p2 := (100 + (w * x) + (d getTaille * w)) @  (800 - (h + e * x + e)) . 	p3 := (100 + (w * x) + (d getTaille * w)) @  (800 - (h + e * x + h + e)) .	p4 := (100 + (w * x)) @  (800 - (h + e * x + h + e)) .	Transcript show: ''ex1 = ''	, (100 + (w * x) + (d getTaille * w)) asString.	x := x+1.	m :=  (PolygonMorph			vertices: {p1. p2. p3. p4}			color: Color random			borderWidth: 1			borderColor: Color black).		piste addMorph: m.		d setMorph: m].Smalltalk at: #Piste put: piste'. (jeu getEssenceAttribut: #disque) compile: 'jeVaisSurPiquet: unPiquet	| d dd p x y w h e g1 g2 g3 z |	w := 10.	h := 16.	e :=5.	z := ((monde get: #Hanoi) getEtresAttributs: #disque) first getTaille * w.	g1 := 100 + (z / 2).	g2 := 100 + (3 * z / 2).	g3 := 100 + (5 * z / 2).	p := self getPiquet.	d := p getElements select: [ :each |		     each getEssence getNom == #disque ]. "disques sur mon piquet "	dd := unPiquet getElements select: [ :each |		      each getEssence getNom == #disque ]. "disques sur  piquet cible "	(dd size == 0 or: [ dd last getTaille > self getTaille ]) ifTrue: [ "je quitte mon piquet "		p removeEtre: self.		d := p getElements select: [ :each |			     each getEssence getNom == #disque ]. "disques restant sur mon piquet"		d size ~~ 0 ifTrue: [			d last removeEtatDeNom: #sous.			self removeEtatDeNom: #sur ].		(self getEtat: #déplacé) isNil ifFalse: [self removeEtatDeNom: #déplacé].		(self affecteEtat: (absolu get: #déplacé) dansSituation: monde)			attributionEtre: p ].	dd size ~~ 0 ifTrue: [		(dd last affecteEtat: (absolu get: #sous) dansSituation: monde)			attributionEtre: self.		(self affecteEtat: (absolu get: #sur) dansSituation: monde)			attributionEtre: dd last ].	unPiquet introductionEtre: self.	"(self getNom asString , '' : '' , p getNom , '' ---> '' , unPiquet getNom)		crTrace."			unPiquet getNom == #piquet_0 ifTrue: [		x := g1 - (self getTaille * w / 2)].		unPiquet getNom == #piquet_1 ifTrue: [		x := g2 - (self getTaille * w / 2)].		unPiquet getNom == #piquet_2 ifTrue: [		x := g3 - (self getTaille * w / 2)].	y := 800  - (unPiquet getElements size * (h + e)) .		self getMorph position: x @ y .	Semaphore new		waitTimeoutMilliseconds: (Smalltalk at: #delay)		onCompletion: [  ]		onTimeout: [  ] '.(jeu getEssenceAttribut: #disque) compile: 'jePrendsLeRelais	| disques disks choix step previous |		" choix du piquet cible, sans retour arrière possible  "		choix := nil.		" si je me suis déjà déplacé, sur quel piquet étais-je ? "	(self getEtat: #déplacé) notNil ifTrue: [previous := (self getEtat: #déplacé) getEtreAttribut: #piquet].		" si un piquet libre, y aller "		((monde get: #Hanoi) getEtresAttributs: #piquet) do: [ :unPiquet |			(unPiquet ~~ self getPiquet and: [ unPiquet ~~ previous ])  ifTrue: [ 				disks := unPiquet getElements select: [ :each | each getEssence getNom == #disque ].				disks size == 0 ifTrue: [choix := unPiquet] ] ].			choix isNil ifTrue: [ 		" sinon, trouver un piquet portant un disque plus grand" 		((monde get: #Hanoi) getEtresAttributs: #piquet) do: [ :unPiquet |			(unPiquet ~~ self getPiquet and: [ unPiquet ~~ previous ]) ifTrue: [ 				disques := unPiquet getElements select: [ :each | each getEssence getNom == #disque ].				disques detect: [ :d | d getTaille > self getTaille ] ifFound: [:e | choix := e getPiquet] ] ]].					step := (Smalltalk at: #Step) + 1.	Smalltalk at: #Step put: step.	(Smalltalk at: #StepMorph) contents: step asString.		self jeVaisSurPiquet: choix.  "self halt."		(monde get: #Hanoi) getEtres do: [ :d | d removeEtatDeNom: #dernier ].	self affecteEtat: (absolu get: #dernier) dansSituation: monde'.						iceo soit: #Hanoi essence: jeu.	" empilement intial des disques sur le piquet 0"((monde get: #Hanoi) getEtresAttributs: #disque)  do: 			[:d | ((monde get: #Hanoi) getEtreAttribut: #piquet_0)  introductionEtre: d].(Interval from: 1 to: (((monde get: #Hanoi) getEtresAttributs: #disque) size -1))  do:  [:i | 				(((monde get: #Hanoi) getEtresAttributs: #disque) at:  i)  affecteEtat: (absolu get: #sous) dansSituation:  monde. 				((((monde get: #Hanoi) getEtresAttributs: #disque) at:  i)  getEtat: #sous) attributionEtre: 	(((monde get: #Hanoi) getEtresAttributs: #disque) at:  i+1).				(((monde get: #Hanoi) getEtresAttributs: #disque) at:  i+1)  affecteEtat: (absolu get: #sur) dansSituation:  monde. 				((((monde get: #Hanoi) getEtresAttributs: #disque) at:  i+1)  getEtat: #sur) attributionEtre:  (((monde get: #Hanoi) getEtresAttributs: #disque) at:  i)].			" définition du rôle de chaque joueur "(monde get: #Hanoi) getEtres do: [ :each |	| started |	started := false.	(each getEtat: #comportement) setSemaphore: Semaphore new.	(each getEtat: #comportement) setProcess: ([ :h :d |		 | s |		s isNil ifTrue: [ s := false ].		 [ true ] whileTrue: [				s ifFalse: [					(d getNom , ' is ready') crTrace.				 	 s := true.					 (d getEtat: #comportement) getSemaphore wait ].		d jePrendsLeRelais.		"qui peut maintenant prendre le relais ? "		 h getEtres			detect: [ :disque | disque peutSeDeplacer ]				 ifFound: [ :x |  (x getEtat: #comportement) getSemaphore signal ].		(d getEtat: #comportement) getSemaphore wait ] ]				 newProcessWith: (Array with: (monde get: #Hanoi) with: each)) ].						" ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- "											Transcript clear.Smalltalk at: #Step put: 0.(monde get: #Hanoi)  allezAuxStartingBlocks.