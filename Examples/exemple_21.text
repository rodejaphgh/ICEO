ICEO reset.iceo definitionSituation: 'colorée'.iceo definitionQualite: #couleur situation: (absolu getSituationGenerique: #colorée).iceo definitionSituation: 'palette de couleurs'.iceo definitionQualite: #bleu situation: (absolu getSituationGenerique: 'palette de couleurs') genus: ((absolu getSituationGenerique: #colorée) get: #couleur).iceo definitionQualite: #vert situation: (absolu getSituationGenerique: 'palette de couleurs') genus: ((absolu getSituationGenerique: #colorée) get: #couleur).iceo definitionQualite: #rouge situation: (absolu getSituationGenerique: 'palette de couleurs') genus:  ((absolu getSituationGenerique: #colorée) get: #couleur).iceo definitionQualite: #cyan situation: (absolu getSituationGenerique: 'palette de couleurs') genus:  ((absolu getSituationGenerique: #colorée) get: #couleur).iceo definitionQualite: #magenta situation: (absolu getSituationGenerique: 'palette de couleurs') genus:  ((absolu getSituationGenerique: #colorée) get: #couleur).iceo definitionQualite: #jaune situation: (absolu getSituationGenerique: 'palette de couleurs') genus:  ((absolu getSituationGenerique: #colorée) get: #couleur).iceo definitionQualite: #blanc situation: (absolu getSituationGenerique: 'palette de couleurs') genus:  ((absolu getSituationGenerique: #colorée) get: #couleur).iceo definitionQualite: #noir situation: (absolu getSituationGenerique: 'palette de couleurs') genus:  ((absolu getSituationGenerique: #colorée) get: #couleur).iceo soit: 'une palette de couleurs' situationGenerique: (absolu getSituationGenerique: 'palette de couleurs').iceo definition: #objet.objet peutEtre: ((absolu getSituationGenerique: #colorée) get: #couleur).iceo definition: #lumière.iceo definition: 'lumière monochromatique' genus: lumière.iceo definition: 'lumière polychromatique' genus: lumière.iceo definition: 'lumière bleu' genus: (absolu get: 'lumière monochromatique').iceo definitionQualiteEssentielle: 'bleu' pour: (absolu get: 'lumière bleu') effectivite: #permanente.iceo definition: 'lumière vert' genus: (absolu get: 'lumière monochromatique').iceo definitionQualiteEssentielle: 'vert' pour: (absolu get: 'lumière vert') effectivite: #permanente.iceo definition: 'lumière rouge' genus: (absolu get: 'lumière monochromatique').iceo definitionQualiteEssentielle: 'rouge' pour: (absolu get: 'lumière rouge') effectivite: #permanente.iceo definition: 'lumière cyan' genus: (absolu get: 'lumière polychromatique').iceo definitionQualiteEssentielle: 'cyan' pour: (absolu get: 'lumière cyan') effectivite: #permanente.(absolu get: 'lumière cyan')  referenceEssence: (absolu get: 'lumière bleu') cardinalite: 1.(absolu get: 'lumière cyan')  referenceEssence: (absolu get: 'lumière vert') cardinalite: 1.iceo definition: 'lumière magenta' genus: (absolu get: 'lumière polychromatique').iceo definitionQualiteEssentielle: 'magenta' pour: (absolu get: 'lumière magenta') effectivite: #permanente.(absolu get: 'lumière magenta')  referenceEssence: (absolu get: 'lumière bleu') cardinalite: 1.(absolu get: 'lumière magenta')  referenceEssence: (absolu get: 'lumière rouge') cardinalite: 1.iceo definition: 'lumière jaune' genus: (absolu get: 'lumière polychromatique').iceo definitionQualiteEssentielle: 'jaune' pour: (absolu get: 'lumière jaune') effectivite: #permanente.(absolu get: 'lumière jaune')  referenceEssence: (absolu get: 'lumière vert') cardinalite: 1.(absolu get: 'lumière jaune')  referenceEssence: (absolu get: 'lumière rouge') cardinalite: 1.iceo definition: 'lumière blanc' genus: (absolu get: 'lumière polychromatique').iceo definitionQualiteEssentielle: 'blanc' pour: (absolu get: 'lumière blanc') effectivite: #permanente.(absolu get: 'lumière blanc')  referenceEssence: (absolu get: 'lumière vert') cardinalite: 1.(absolu get: 'lumière blanc')  referenceEssence: (absolu get: 'lumière rouge') cardinalite: 1.(absolu get: 'lumière blanc')  referenceEssence: (absolu get: 'lumière bleu') cardinalite: 1.iceo definition: 'lumière noir' genus: (absolu get: 'lumière polychromatique').iceo definitionQualiteEssentielle: 'noir' pour: (absolu get: 'lumière noir') effectivite: #permanente.iceo definition: #torche.torche referenceEssence: lumière." ---------------------------------------------- " objet compile:  'lumièresReflétées 	| l |	l := (absolu get: ''lumière '',  (self  getEtatEssence: ((absolu getSituationGenerique: #colorée) get: #couleur)) getNom).	l getGenus == (absolu get: ''lumière monochromatique'') ifTrue: [^ OrderedCollection with: l ] 	ifFalse: [ ^ l getEssencesAttributs sort: [:a :b | a getNom  < b getNom] ]   '.	torche  compile:  'lumièresEmises 	| l |	l := (self getEtreAttribut: #lumière) getEssence.	l getGenus == (absolu get: ''lumière monochromatique'') ifTrue: [^ OrderedCollection with: l ] 	ifFalse: [ ^ l  getEssencesAttributs  sort: [:a :b | a getNom  < b getNom]  ]  '.	objet compile:  'couleurApparenteEclairePar: uneTorche 	| l   c  s t |   	s := (absolu getElements: lumière)  select: [:each |  		(each getGenus == (absolu get: ''lumière monochromatique'')) or: [each getGenus == (absolu get: ''lumière polychromatique'')]].	t := s detect: [:each | 					l := each. 		l getGenus == (absolu get: ''lumière monochromatique'') ifTrue: [c := OrderedCollection with: l ] 			ifFalse: [ c := l getEssencesAttributs sort: [:a :b | a getNom  < b getNom] ] . 		c   =  ((uneTorche lumièresEmises  intersection: self lumièresReflétées) sort: [:a :b | a getNom  < b getNom]) ] .	^t getQualites at: 1	  '.		" ----------------------------------- "				iceo soit: 'un objet' essence: objet.(monde get: 'un objet') affecteEtat: ((absolu getSituationGenerique: 'palette de couleurs') getElement: #cyan) dansSituation: (monde get: 'une palette de couleurs').iceo soit: 'une torche' essence: torche.(monde get: 'une torche') attributionEtre:  'une lumière' essence: (absolu get: 'lumière jaune')." ---------------------------------------- " "     (monde get: 'un objet') lumièresReflétées       ""     (monde get: 'une torche') lumièresEmises   ""        (monde get: 'un objet')  couleurApparenteEclairePar: (monde get: 'une torche')       "